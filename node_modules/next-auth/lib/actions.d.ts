import type { AuthAction } from "@auth/core/types";
import type { NextAuthConfig } from "./index.js";
import type { NextAuthResult, Session } from "../index.js";
import type { headers } from "next/headers";
type SignInParams = Parameters<NextAuthResult["signIn"]>;
export declare function signIn(provider: SignInParams[0], options: FormData | ({
    redirectTo?: string | undefined;
    redirect?: boolean | undefined;
} & Record<string, any>) | undefined, authorizationParams: SignInParams[2], config: NextAuthConfig): Promise<any>;
type SignOutParams = Parameters<NextAuthResult["signOut"]>;
export declare function signOut(options: SignOutParams[0], config: NextAuthConfig): Promise<any>;
type UpdateParams = Parameters<NextAuthResult["unstable_update"]>;
export declare function update(data: UpdateParams[0], config: NextAuthConfig): Promise<Session | null>;
/**
 * Extract the origin and base path from either `AUTH_URL` or `NEXTAUTH_URL` environment variables,
 * or the request's headers and the {@link NextAuthConfig.basePath} option.
 */
export declare function createActionURL(action: AuthAction, h: Headers | ReturnType<typeof headers>, basePath?: string): URL;
export {};
//# sourceMappingURL=actions.d.ts.map