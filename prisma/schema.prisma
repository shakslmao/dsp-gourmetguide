// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// npx prisma generate
// npx prisma db push

generator client {
    provider = "prisma-client-js"
    output   = "../node_modules/.prisma/client"
}

datasource db {
    provider     = "mongodb"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum PriceRange {
    NO_PREFERENCE
    VERY_LOW
    LOW
    MEDIUM
    HIGH
    VERY_HIGH
}

enum SocialVisibility {
    PRIVATE
    FRIENDS_ONLY
    PUBLIC
}

enum NotificationType {
    EMAIL
    SMS
    APP_NOTIFICATION
}

model User {
    id                     String                   @id @default(auto()) @map("_id") @db.ObjectId
    name                   String
    email                  String?                  @unique
    emailVerified          DateTime?
    password               String?
    image                  String?
    contactNumber          String?
    preferencesId          String?                  @db.ObjectId // OPTIONAL FOR NOW - TO BE MADE REQUIRED
    twoFactorEnabled       Boolean                  @default(false)
    twoFactorConfirmation  TwoFactorConfirmation?
    history                History[]
    preferences            Preferences?             @relation(fields: [preferencesId], references: [id]) // OPTIONAL FOR NOW - TO BE MADE REQUIRED
    Ratings                Ratings[]
    Reviews                Reviews[]
    Account                Account[]
    NotificationPreference NotificationPreference[]
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Preferences {
    id                          String            @id @default(auto()) @map("_id") @db.ObjectId
    User                        User[]
    cuisineTypes                String[]
    dietaryRestrictions         String[]
    priceRangePreference        PriceRange
    preferredTime               String[]
    preferredLocations          String[]
    currentLocation             String?
    recommendationRadius        Int[]
    ambienceTypes               String[]
    prefersMichelinRated        Boolean           @default(false)
    accessibilityFeatures       String[]
    socialVisibilityPreferences SocialVisibility?
}

model History {
    id         String     @id @default(auto()) @map("_id") @db.ObjectId
    userId     String     @db.ObjectId
    User       User?      @relation(fields: [userId], references: [id])
    actionType ActionType
    details    Json
    timestamp  DateTime
    location   String?
}

enum ActionType {
    VISITED_RESTAURANT
    SEARCHED
    SUBMITTED_RATING
    SUBMITTED_REVIEW
    MARKED_FAVOURITE
}

model Restaurant {
    id                  String     @id @default(auto()) @map("_id") @db.ObjectId
    restaurantName      String
    location            Location   @relation(fields: [locationId], references: [id])
    locationId          String     @db.ObjectId
    cuisineType         String[]
    michelinStars       Int?
    michelinBibGourmand Boolean    @default(false)
    michelinGreenStar   Boolean    @default(false)
    priceRange          PriceRange
    restaurantMenu      MenuItem[]
    reviewsId           String     @db.ObjectId
    Ratings             Ratings?   @relation(fields: [ratingsId], references: [id])
    ratingsId           String?    @db.ObjectId
    Reviews             Reviews[]
}

model Location {
    id         String       @id @default(auto()) @map("_id") @db.ObjectId
    address    String
    longitude  Float
    latitude   Float
    city       String
    zipCode    String
    country    String
    Restaurant Restaurant[]
}

model Ratings {
    id              String       @id @default(auto()) @map("_id") @db.ObjectId
    averageRating   Float
    numberOfRatings Int
    User            User?        @relation(fields: [userId], references: [id])
    userId          String?      @db.ObjectId
    Restaurant      Restaurant[]
}

model Reviews {
    id           String     @id @default(auto()) @map("_id") @db.ObjectId
    Restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
    restaurantId String     @db.ObjectId
    rating       Int
    review       String
    User         User       @relation(fields: [userId], references: [id])
    userId       String     @db.ObjectId
}

model MenuItem {
    id           String      @id @default(auto()) @map("_id") @db.ObjectId
    name         String
    description  String?
    price        Float
    Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
    restaurantId String?     @db.ObjectId
}

model VerificationToken {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorToken {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorConfirmation {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}

model NotificationPreference {
    id     String           @id @default(auto()) @map("_id") @db.ObjectId
    type   NotificationType
    userId String           @db.ObjectId
    User   User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}
