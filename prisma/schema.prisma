// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// npx prisma generate
// npx prisma db push

generator client {
    provider = "prisma-client-js"
    output   = "../node_modules/.prisma/client"
}

datasource db {
    provider     = "mongodb"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum PriceRange {
    NO_PREFERENCE
    VERY_LOW
    LOW
    MEDIUM
    HIGH
    VERY_HIGH
}

enum SocialVisibility {
    PRIVATE
    FRIENDS_ONLY
    PUBLIC
}

enum NotificationType {
    EMAIL
    SMS
    APP_NOTIFICATION
}

enum ActionType {
    VISITED
    SEARCHED
    SUBMITTED_RATING
    SUBMITTED_REVIEW
    LIKE
    DISLIKE
    FAVOURITE
    UNFAVOURITE
}

model User {
    id                     String                   @id @default(auto()) @map("_id") @db.ObjectId
    name                   String
    email                  String?                  @unique
    emailVerified          DateTime?
    password               String?
    image                  String?
    contactNumber          String?
    twoFactorEnabled       Boolean                  @default(false)
    preferencesId          String?                  @unique @db.ObjectId
    preferences            Preferences?             @relation(fields: [preferencesId], references: [id])
    restaurantId           String[]                 @db.ObjectId
    restaurantName         String[]
    twoFactorConfirmation  TwoFactorConfirmation?
    history                History[]
    userRatings            UserRatings[]
    userReviews            UserReviews[]
    Account                Account[]
    NotificationPreference NotificationPreference[]
    UserRestaurant         UserRestaurant[]
    RecommendationResult   RecommendationResult[]
}

model Preferences {
    id                    String     @id @default(auto()) @map("_id") @db.ObjectId
    userId                String?    @unique @db.ObjectId
    cuisineTypes          String[]
    dietaryRestrictions   String[]
    priceRangePreference  PriceRange @default(NO_PREFERENCE)
    preferredTime         String[]
    preferredLocations    String[]
    currentLocation       String?
    userCoordinates       Json?
    recommendationRadius  Int
    ambienceTypes         String[]
    prefersHigherRated    Boolean    @default(false)
    accessibilityFeatures Boolean    @default(false)
    locationFeatureUsed   Boolean    @default(false)
    User                  User?
}

model Restaurant {
    id                                        String                                      @id @default(auto()) @map("_id") @db.ObjectId
    yelpId                                    String?                                     @unique
    alias                                     String?
    restaurantName                            String?
    imageUrl                                  String?
    url                                       String?
    isClosed                                  Boolean?
    categories                                String[]
    reviewCount                               Int?
    coordinates                               Json?
    price                                     Int?
    phone                                     String?
    displayPhone                              String?
    customerRatings                           Float?
    locationId                                String?
    reviewsId                                 String?
    ratingsId                                 String?
    RecommendationResultRestaurant            RecommendationResultRestaurant[]
    Location                                  Location[]
    UserRestaurant                            UserRestaurant[]
    UserRatings                               UserRatings?                                @relation(fields: [userRatingsId], references: [id])
    userRatingsId                             String?                                     @db.ObjectId
    UserReviews                               UserReviews[]
    MenuItem                                  MenuItem[]
    RecommendationResultOutsideProxRestaurant RecommendationResultOutsideProxRestaurant[]
}

model FakeRestaurant {
    id                                 String                               @id @default(auto()) @map("_id") @db.ObjectId
    restaurantId                       String                               @unique @map("restaurant_id") @db.ObjectId
    restaurantName                     String                               @map("name")
    cuisines                           Json
    dietary                            Json
    priceRange                         String                               @map("price")
    rating                             Float
    reviewCount                        Int                                  @map("review_count")
    ambience                           Json
    accessibility                      String
    location                           String
    coordinates                        Json
    openingHours                       Json                                 @map("opening_hours")
    RecommendationResultFakeRestaurant RecommendationResultFakeRestaurant[]
    UserRestaurant                     UserRestaurant[]
    UserReviews                        UserReviews[]
    MenuItem                           MenuItem[]
}

model RecommendationResult {
    id                                        String                                      @id @default(auto()) @map("_id") @db.ObjectId
    userId                                    String                                      @db.ObjectId
    createdAt                                 DateTime
    feedbackReceived                          Boolean
    RecommendationResultRestaurant            RecommendationResultRestaurant[]
    RecommendationResultFakeRestaurant        RecommendationResultFakeRestaurant[]
    RecommendationResultOutsideProxRestaurant RecommendationResultOutsideProxRestaurant[]
    User                                      User                                        @relation(fields: [userId], references: [id])
    RecommendationFeedback                    RecommendationFeedback[]
}

model RecommendationResultRestaurant {
    id                     String               @id @default(auto()) @map("_id") @db.ObjectId
    recommendationResultId String               @db.ObjectId
    recommendationResult   RecommendationResult @relation(fields: [recommendationResultId], references: [id])
    restaurantId           String               @db.ObjectId
    restaurant             Restaurant           @relation(fields: [restaurantId], references: [id])

    @@unique([recommendationResultId, restaurantId], name: "unique_recommendationResult_restaurant")
}

model RecommendationResultOutsideProxRestaurant {
    id                           String               @id @default(auto()) @map("_id") @db.ObjectId
    recommendationResultId       String               @db.ObjectId
    recommendationResult         RecommendationResult @relation(fields: [recommendationResultId], references: [id])
    outsideProximityRestaurantId String               @db.ObjectId
    restaurant                   Restaurant           @relation(fields: [outsideProximityRestaurantId], references: [id])

    @@unique([recommendationResultId, outsideProximityRestaurantId], name: "unique_recommendationResult_restaurant")
}

model RecommendationResultFakeRestaurant {
    id                     String               @id @default(auto()) @map("_id") @db.ObjectId
    recommendationResultId String               @db.ObjectId
    recommendationResult   RecommendationResult @relation(fields: [recommendationResultId], references: [id])
    fakeRestaurantId       String               @db.ObjectId
    fakeRestaurant         FakeRestaurant       @relation(fields: [fakeRestaurantId], references: [id])

    @@unique([recommendationResultId, fakeRestaurantId], name: "unique_recommendationResult_fakeRestaurant")
}

model RecommendationFeedback {
    id                     String               @id @default(auto()) @map("_id") @db.ObjectId
    recommendationResultId String               @db.ObjectId
    RecommendationResult   RecommendationResult @relation(fields: [recommendationResultId], references: [id])
    actionType             ActionType
    sentimentScore         Float?
    feedbackText           String?
    createdAt              DateTime
}

model Location {
    id             String      @id @default(auto()) @map("_id") @db.ObjectId
    address1       String
    address2       String?
    address3       String?
    city           String
    zipCode        String
    country        String
    state          String
    displayAddress String
    longitude      Float
    latitude       Float
    Restaurant     Restaurant? @relation(fields: [restaurantId], references: [id])
    restaurantId   String?     @db.ObjectId
}

model UserRestaurant {
    id               String          @id @default(auto()) @map("_id") @db.ObjectId
    userId           String          @db.ObjectId
    restaurantId     String          @db.ObjectId
    User             User            @relation(fields: [userId], references: [id])
    Restaurant       Restaurant      @relation(fields: [restaurantId], references: [id])
    FakeRestaurant   FakeRestaurant? @relation(fields: [fakeRestaurantId], references: [id])
    fakeRestaurantId String?         @db.ObjectId

    @@unique([userId, restaurantId])
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model History {
    id         String     @id @default(auto()) @map("_id") @db.ObjectId
    userId     String     @db.ObjectId
    User       User?      @relation(fields: [userId], references: [id])
    actionType ActionType
    details    Json
    timestamp  DateTime
    location   String?
}

model UserRatings {
    id              String       @id @default(auto()) @map("_id") @db.ObjectId
    averageRating   Float
    numberOfRatings Int
    User            User?        @relation(fields: [userId], references: [id])
    userId          String?      @db.ObjectId
    Restaurant      Restaurant[]
}

model UserReviews {
    id               String          @id @default(auto()) @map("_id") @db.ObjectId
    Restaurant       Restaurant      @relation(fields: [restaurantId], references: [id])
    restaurantId     String          @db.ObjectId
    rating           Int
    review           String
    User             User            @relation(fields: [userId], references: [id])
    userId           String          @db.ObjectId
    FakeRestaurant   FakeRestaurant? @relation(fields: [fakeRestaurantId], references: [id])
    fakeRestaurantId String?         @db.ObjectId
}

model MenuItem {
    id               String          @id @default(auto()) @map("_id") @db.ObjectId
    name             String
    description      String?
    price            Float
    Restaurant       Restaurant?     @relation(fields: [restaurantId], references: [id])
    restaurantId     String?         @db.ObjectId
    FakeRestaurant   FakeRestaurant? @relation(fields: [fakeRestaurantId], references: [id])
    fakeRestaurantId String?         @db.ObjectId
}

model VerificationToken {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorToken {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorConfirmation {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}

model NotificationPreference {
    id     String           @id @default(auto()) @map("_id") @db.ObjectId
    type   NotificationType
    userId String           @db.ObjectId
    User   User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}
