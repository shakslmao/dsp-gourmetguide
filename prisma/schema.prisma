// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// npx prisma generate
// npx prisma db push

generator client {
    provider = "prisma-client-js"
    output   = "../node_modules/.prisma/client"
}

datasource db {
    provider     = "mongodb"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum PriceRange {
    NO_PREFERENCE
    VERY_LOW
    LOW
    MEDIUM
    HIGH
    VERY_HIGH
}

enum SocialVisibility {
    PRIVATE
    FRIENDS_ONLY
    PUBLIC
}

enum NotificationType {
    EMAIL
    SMS
    APP_NOTIFICATION
}

model User {
    id                     String                   @id @default(auto()) @map("_id") @db.ObjectId
    name                   String
    email                  String?                  @unique
    emailVerified          DateTime?
    password               String?
    image                  String?
    contactNumber          String?
    twoFactorEnabled       Boolean                  @default(false)
    preferencesId          String?                  @unique @db.ObjectId
    preferences            Preferences?             @relation(fields: [preferencesId], references: [id])
    restaurantId           String[]                 @db.ObjectId
    restaurantName         String[]
    twoFactorConfirmation  TwoFactorConfirmation?
    history                History[]
    userRatings            UserRatings[]
    userReviews            UserReviews[]
    Account                Account[]
    NotificationPreference NotificationPreference[]
    UserRestaurant         UserRestaurant[]
}

model Preferences {
    id                    String     @id @default(auto()) @map("_id") @db.ObjectId
    userId                String?    @unique @db.ObjectId
    cuisineTypes          String[]
    dietaryRestrictions   String[]
    priceRangePreference  PriceRange @default(NO_PREFERENCE)
    preferredTime         String[]
    preferredLocations    String[]
    currentLocation       String?
    userCoordinates       Json?
    recommendationRadius  Int
    ambienceTypes         String[]
    prefersHigherRated    Boolean    @default(false)
    accessibilityFeatures Boolean    @default(false)
    locationFeatureUsed   Boolean    @default(false)
    User                  User?
}

model Restaurant {
    id              String           @id @default(auto()) @map("_id") @db.ObjectId
    yelpId          String?          @unique
    alias           String?
    restaurantName  String?
    imageUrl        String?
    url             String?
    isClosed        Boolean?
    categories      String[]
    reviewCount     Int?
    coordinates     Json?
    price           Int?
    phone           String?
    displayPhone    String?
    customerRatings Float?
    location        Location?        @relation(fields: [locationId], references: [id])
    locationId      String?          @unique @db.ObjectId
    reviewsId       String?          @db.ObjectId
    userRatings     UserRatings?     @relation(fields: [ratingsId], references: [id])
    ratingsId       String?          @db.ObjectId
    userReviews     UserReviews[]
    MenuItem        MenuItem[]
    UserRestaurant  UserRestaurant[]
}

model Location {
    id             String      @id @default(auto()) @map("_id") @db.ObjectId
    address1       String
    address2       String?
    address3       String?
    city           String
    zipCode        String
    country        String
    state          String
    displayAddress String
    longitude      Float
    latitude       Float
    Restaurant     Restaurant?
}

model UserRestaurant {
    id           String     @id @default(auto()) @map("_id") @db.ObjectId
    userId       String     @db.ObjectId
    restaurantId String     @db.ObjectId
    User         User       @relation(fields: [userId], references: [id])
    Restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

    @@unique([userId, restaurantId])
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model History {
    id         String     @id @default(auto()) @map("_id") @db.ObjectId
    userId     String     @db.ObjectId
    User       User?      @relation(fields: [userId], references: [id])
    actionType ActionType
    details    Json
    timestamp  DateTime
    location   String?
}

enum ActionType {
    VISITED_RESTAURANT
    SEARCHED
    SUBMITTED_RATING
    SUBMITTED_REVIEW
    MARKED_FAVOURITE
}

model UserRatings {
    id              String       @id @default(auto()) @map("_id") @db.ObjectId
    averageRating   Float
    numberOfRatings Int
    User            User?        @relation(fields: [userId], references: [id])
    userId          String?      @db.ObjectId
    Restaurant      Restaurant[]
}

model UserReviews {
    id           String     @id @default(auto()) @map("_id") @db.ObjectId
    Restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
    restaurantId String     @db.ObjectId
    rating       Int
    review       String
    User         User       @relation(fields: [userId], references: [id])
    userId       String     @db.ObjectId
}

model MenuItem {
    id           String      @id @default(auto()) @map("_id") @db.ObjectId
    name         String
    description  String?
    price        Float
    Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
    restaurantId String?     @db.ObjectId
}

model VerificationToken {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorToken {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorConfirmation {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}

model NotificationPreference {
    id     String           @id @default(auto()) @map("_id") @db.ObjectId
    type   NotificationType
    userId String           @db.ObjectId
    User   User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}
